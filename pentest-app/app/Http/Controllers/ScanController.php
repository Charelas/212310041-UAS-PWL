<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Scan;
use App\Services\ThreatIntelligenceService;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Validator;

class ScanController extends Controller
{
    public function analyze(Request $request)
    {
        $request->merge(['url' => $this->addHttpScheme($request->url)]);

        $validator = Validator::make($request->all(), [
            'url' => 'required|url',
        ]);

        if ($validator->fails()) {
            return redirect('/home')
                        ->withErrors($validator)
                        ->withInput();
        }

        $url = $request->input('url');

        if (!$this->isValidUrl($url)) {
            return redirect('/home')
                        ->withErrors(['url' => 'The URL must be valid.'])
                        ->withInput();
        }

        $host = parse_url($url, PHP_URL_HOST);
        $ip = gethostbyname($host); // Dapatkan IP address dari host
        $threatIntelligence = $this->threatIntelligenceService->getThreatIntelligence($ip)??[];


        // Dapatkan informasi DNS
        try {
            $dns_info = dns_get_record($host, DNS_ALL);
        } catch (\Exception $e) {
            $dns_info = ['error' => 'DNS Query failed: ' . $e->getMessage()];
        }
        
        // Dapatkan informasi Header
        try {
            $headers_info = get_headers($url, 1);
        } catch (\Exception $e) {
            $headers_info = ['error' => 'Header fetch failed: ' . $e->getMessage()];
        }
        
        // Dapatkan informasi SSL
        $ssl_info = $this->getSSLInfo($host);

        // Dapatkan informasi dari Shodan API
        $shodan_info = $this->getShodanInfo($ip);

        // Dapatkan informasi Whois
        $whois_info = $this->getWhoisInfo($host);

        // Dapatkan informasi GeoIP
        $geoip_info = $this->getGeoIPInfo($ip);

        // Dapatkan informasi Reverse DNS
        $reverse_dns_info = $this->getReverseDNSInfo($ip);

        // Dapatkan informasi kerentanan
        $vulnerability_info = $this->getVulnerabilityInfo($url);

        // Dapatkan analisis keamanan konten web
        $web_content_info = $this->getWebContentInfo($url);

        // Dapatkan informasi reputasi URL
        $url_reputation = $this->getUrlReputation($url);

        // Simpan hasil scan ke database
        $scan = Scan::create([
            'url' => $url,
            'dns_info' => json_encode($dns_info),
            'ssl_info' => json_encode($ssl_info),
            'headers_info' => json_encode($headers_info),
            'shodan_info' => json_encode($shodan_info),
            'whois_info' => json_encode($whois_info),
            'geoip_info' => json_encode($geoip_info),
            'reverse_dns_info' => json_encode($reverse_dns_info),
            'vulnerability_info' => json_encode($vulnerability_info),
            'web_content_info' => json_encode($web_content_info),
            'url_reputation' => json_encode($url_reputation),
        ]);


        $isSecure = !$vulnerability_info['xss'] && !$vulnerability_info['sql_injection'] && !$url_reputation['blacklisted'];

        // Operkan informasi ke view results.blade.php
        return view('results', [
            'scan' => $scan,
            'url' => $url,
            'headers_info' => $headers_info,
            'dnsRecords' => $dns_info,
            'ssl_info' => $ssl_info,
            'whois_info' => $whois_info,
            'geoip_info' => $geoip_info,
            'reverse_dns_info' => $reverse_dns_info,
            'vulnerability_info' => $vulnerability_info,
            'web_content_info' => $web_content_info,
            'url_reputation' => $url_reputation,
            'threat_intelligence' => $threatIntelligence,
            'isSecure' => $isSecure,
        ]);

        
    }

    // public function exportPDF($id)
    // {
    //     $scan = Scan::findOrFail($id);

    //     $pdf = PDF::loadView('results', compact('scan'));

    //     return $pdf->download('scan_results.pdf');
    // }

    // private function getSSLInfo($url)
    // {
    //     $orignal_parse = parse_url($url, PHP_URL_HOST);
    //     try {
    //         $get = stream_context_create(array("ssl" => array("capture_peer_cert" => TRUE)));
    //         $read = stream_socket_client("ssl://".$orignal_parse.":443", $errno, $errstr, 30, STREAM_CLIENT_CONNECT, $get);
    //         $cert = stream_context_get_params($read);
    //         return openssl_x509_parse($cert['options']['ssl']['peer_certificate']);
    //     } catch (\Exception $e) {
    //         return ['error' => 'SSL fetch failed: ' . $e->getMessage()];
    //     }
    // }

    private function getSSLInfo($host)
    {
        $apiKey = env('SSL_CERTIFICATE_API_KEY');
        $response = Http::get("https://ssl-certificates.whoisxmlapi.com/api/v1?apiKey={$apiKey}&domainName={$host}");

        if ($response->successful()) {
            return $response->json();
        } else {
            return ['error' => 'Shodan API request failed: ' . $response->body()];
        }
    }

    private function getShodanInfo($ip)
    {
        $apiKey = env('SHODAN_API_KEY');
        $response = Http::get("https://api.shodan.io/shodan/host/{$ip}?key={$apiKey}");

        if ($response->successful()) {
            return $response->json();
        } else {
            return ['error' => 'Shodan API request failed: ' . $response->body()];
        }
    }

    private function getWhoisInfo($host)
    {
        $apiKey = env('WHOIS_API_KEY');
        $response = Http::get("https://www.whoisxmlapi.com/whoisserver/WhoisService?apiKey={$apiKey}&domainName={$host}&outputFormat=JSON");

        if ($response->successful()) {
            return $response->json();
        } else {
            return ['error' => 'Whois API request failed: ' . $response->body()];
        }
    }

    private function getGeoIPInfo($ip)
    {
        $apiKey = env('GEOIP_API_KEY');
        $response = Http::get("https://ip-geolocation.whoisxmlapi.com/api/v1?apiKey={$apiKey}&ip={$ip}");

        if ($response->successful()) {
            return $response->json();
        } else {
            return ['error' => 'GeoIP API request failed: ' . $response->body()];
        }
    }

    private function getReverseDNSInfo($ip)
    {
        try {
            $reverse_dns_info = dns_get_record($ip, DNS_PTR);
            return $reverse_dns_info;
        } catch (\Exception $e) {
            return ['error' => 'Reverse DNS fetch failed: ' . $e->getMessage()];
        }
    }

    private function getVulnerabilityInfo($url)
    {
        // Placeholder: Replace with actual API call or logic for vulnerability detection
        return [
            'xss' => false,
            'sql_injection' => false,
            'open_ports' => ['80', '443'],
        ];
    }

    private function getWebContentInfo($url)
    {
        $apiKey = 'f7659011dc5c569f962d98424299f580ffa61081f535b219822460a57476d827';
        $apiUrl = 'https://www.virustotal.com/vtapi/v2/url/report?apikey=' . $apiKey . '&resource=' . urlencode($url);

        $response = file_get_contents($apiUrl);
        $result = json_decode($response, true);
        
        //Checking for malware detected
        $malware = false;
        $phising = false;

        if (isset($result['possitives']) && $result['possitives'] > 0) {
            foreach ($result['scans'] as $scan) {
                if (isset($scan['result']) && $scan['result'] == 'malware') {
                    $malware = true;
                }
                if (isset($scan['result']) && $scan['result'] == 'phising') {
                    $phising = true;
                }
            }
        }

        return [
            'malware' => $malware,
            'phishing' => $phising,
        ];
    }

    private function getUrlReputation($url) 
    {
        $apiKey = 'at_bbLK1cBgYkXhtm857tTMJc7jY5CJe';
        $apiUrl = 'https://domain-reputation.whoisxmlapi.com/api/v2?apiKey=' . $apiKey . '&domainName=' . urlencode($url);

        $response = file_get_contents($apiUrl);
        $result = json_decode($response, true);

        // Check if the URL is blacklisted
        $blacklisted = false;

        if (isset($result['reputationScore']) && $result['reputationScore'] < 20) {
        $blacklisted = true;
        }

        return [
        'blacklisted' => $blacklisted,
        ];
    }

    protected $threatIntelligenceService;

    public function __construct(ThreatIntelligenceService $threatIntelligenceService)
    {
        $this->threatIntelligenceService = $threatIntelligenceService;
    }


    private function addHttpScheme($url)
    {
        if (!preg_match("~^(?:f|ht)tps?://~i", $url)) {
            $url = "http://" . $url;
        }
        return $url;
    }

    private function isValidUrl($url)
    {
        return filter_var($url, FILTER_VALIDATE_URL) && checkdnsrr(parse_url($url, PHP_URL_HOST), 'A');
    }
}
